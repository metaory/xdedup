#!/bin/bash

#  █░░░░░░░░░░░░░░░░░░░░░░░ ⌜ SHELLOPTS ⌟ ░░░
set -o errexit
set -o errtrace
set -o pipefail
set -o noclobber

#  █░░░░░░░░░░░░░░░░░░░░░░░ ⌜ DEFAULT ⌟ ░░░
declare -g EXT="mkv"
declare -g TOOL="b3sum"
declare -a FILES
declare -A SUMS
declare -A HASH
declare -i VER=3
declare -i DRY=0
declare -i PLAN=0
declare -i I=0
declare -i D=0

#  █░░░░░░░░░░░░░░░░░░░░░░░ ⌜ HELP ⌟ ░░░
function usage {
  cat <<EOF
Usage:
  --plan          create a delete script instead of deleting
  --dry-run       perform a trial run with no changes made
  --ext EXT       file extensions to look for, set * for any (default: mkv)
  --tool NAME     hashing tool (default: b3sum)
  -h, --help      show this help
EOF
  exit 0
}

#  █░░░░░░░░░░░░░░░░░░░░░░░ ⌜ CACHE ⌟ ░░░
function commit {
  echo "Commiting hashes..."
  declare -p HASH >|.meta/hashes
}

#  █░░░░░░░░░░░░░░░░░░░░░░░ ⌜ TRAPS ⌟ ░░░
function on_error {
  local exit_code=$?
  local line_no=$1
  local cmd=$2
  printf '[%s] ❌ ERROR at line %s: %s (exit %s)\n' \
    "$(date '+%H:%M:%S')" "$line_no" "$cmd" "$exit_code" >&2
}

trap 'on_error $LINENO "$BASH_COMMAND"' ERR
trap commit EXIT
trap 'echo "Interrupted"; commit; exit 1' INT

#  █░░░░░░░░░░░░░░░░░░░░░░░ ⌜ COLORS ⌟ ░░░
C='\e[0m'
for i in {0..7}; do declare -g "C${i}"="\e[1;3${i}m"; done

#  █░░░░░░░░░░░░░░░░░░░░░░░ ⌜ OPTIONS ⌟ ░░░
while [[ $# -gt 0 ]]; do
  case "$1" in
  --dry-run)
    DRY=1
    shift
    ;;
  -p | --plan)
    PLAN=1
    shift
    ;;
  --ext)
    EXT=$2
    shift 2
    ;;
  --tool)
    TOOL=$2
    shift 2
    ;;
  -h | --help) usage ;;
  *)
    echo "$C1 unknown arg: $1"
    usage
    ;;
  esac
done

#  █░░░░░░░░░░░░░░░░░░░░░░░ ⌜ ASSERTS ⌟ ░░░
command -v "$TOOL" >/dev/null || {
  echo -e "$C1 ❌ missing: $TOOL" >&2
  exit 127
}

#  █░░░░░░░░░░░░░░░░░░░░░░░ ⌜ DEBUG ⌟ ░░░
echo -e "$C5 -->> running dedupe${C6} v${VER}"
echo -e "$C6 --:: EXT    : $C3 *.${EXT}"
echo -e "$C6 --:: TOOL   : $C3 ${TOOL}"
echo -e "$C6 --:: DRYRUN : $C3 ${DRY}"
echo -e "$C7 ----------------------$C"
sleep 7

#  █░░░░░░░░░░░░░░░░░░░░░░░ ⌜ CORE ⌟ ░░░
function logusage { du -hd1 | sort -h | tee "/tmp/dedup_${1}"; }

function gensum { "$TOOL" "$1" | awk '{print $1}'; }

function rmdup {
  D=$D+1
  ((PLAN)) && {
    echo "rm $1" >>/tmp/dedup_job
  } || echo "rm $1 --verbose"
}

#  ━╸╺━ ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╸╺━

#  █░░░░░░░░░░░░░░░░░░░░░░░ ⌜ COOK ⌟ ░░░
mkdir -p .meta &>/dev/null || :

rm /tmp/dedup_* &>/dev/null || :

logusage pre

mapfile -t FILES < <(find . -type f -name "*.${EXT}")

[ -f .meta/hashes ] && eval "$(cat .meta/hashes)"

echo "${FILES[@]}" >|".meta/all-$(date +%y%m%d%H)"

#  █░░░░░░░░░░░░░░░░░░░░░░░ ⌜ MAIN ⌟ ░░░
for F in "${FILES[@]}"; do
  echo -e ":>${C6}$((I++)) ${C7}${F::70}"

  [ "${HASH[$F]}" = "" ] && HASH[$F]="$(gensum "$F")"

  if [ "${SUMS[${HASH[$F]}]}" = "" ]; then
    SUMS["${HASH[$F]}"]="$F"
  else
    echo -e "${C3}FOUND DUPLICATE"
    echo -e " => $C3 ${F}"
    rmdup "$F"
  fi
done

logusage pos

echo -e "${C7} SCANNED ${C6}${I}"
echo -e "${C7} REMOVED ${C6}${D}"

# vim: ft=bash
