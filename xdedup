#!/bin/bash

#  █░░░░░░░░░░░░░░░░░░░░░░░ ⌜ SHELLOPTS ⌟ ░░░
set -o errexit
set -o errtrace
set -o pipefail
set -o noclobber

#  █░░░░░░░░░░░░░░░░░░░░░░░ ⌜ DEFAULT ⌟ ░░░
declare -g EXT="mkv"
declare -g TOOL="b3sum"
declare -g PLAN_PATH="/tmp/dedup_job"
declare -a FILES
declare -A SUMS
declare -A HASH
declare -i VER=3
declare -i DRY=0
declare -i PLAN=0
declare -i I=0
declare -i D=0

#  █░░░░░░░░░░░░░░░░░░░░░░░ ⌜ HELP ⌟ ░░░
function usage {
  cat <<EOF
Usage:
  --plan          create a delete script instead of deleting
  --dry-run       perform a trial run with no changes made
  --ext EXT       file extensions to look for, set * for any (default: mkv)
  --tool NAME     hashing tool (default: b3sum)
  -h, --help      show this help
EOF
  exit 0
}

function log {
  declare -a modes=(_ errr okay warn info test hint)
  local fg="$(($1 + 8))"
  echo -ne " \e[48;5;${1};38;5;232;1m ${modes[${1}]^^} \e[0m"
  echo -e "\e[38;5;${fg}m ${*:2} \e[0m"
}

#  █░░░░░░░░░░░░░░░░░░░░░░░ ⌜ CACHE ⌟ ░░░
function commit {
  log 4 "Commiting hashes..."
  declare -p HASH >|.meta/hashes
}

#  █░░░░░░░░░░░░░░░░░░░░░░░ ⌜ TRAPS ⌟ ░░░
function on_error {
  local exit_code=$?
  local line_no=$1
  local cmd=$2
  printf '[%s] ❌ ERROR at line %s: %s (exit %s)\n' \
    "$(date '+%H:%M:%S')" "$line_no" "$cmd" "$exit_code" >&2
}

trap 'on_error $LINENO "$BASH_COMMAND"' ERR
trap commit EXIT
# trap 'echo "Interrupted"; commit; exit 1' INT

[ -f .meta/hashes ] && eval "$(cat .meta/hashes)"

#  █░░░░░░░░░░░░░░░░░░░░░░░ ⌜ OPTIONS ⌟ ░░░
while [[ $# -gt 0 ]]; do
  case "$1" in
  --dry-run)
    DRY=1
    shift
    ;;
  -p | --plan)
    PLAN=1
    log 3 running PLAN mode
    log 6 PLAN_PATH: "$PLAN_PATH"
    shift
    ;;
  --ext)
    EXT=$2
    shift 2
    ;;
  --tool)
    TOOL=$2
    shift 2
    ;;
  -h | --help) usage ;;
  *)
    log 1 "unknown arg: $1"
    usage
    ;;
  esac
done

#  █░░░░░░░░░░░░░░░░░░░░░░░ ⌜ ASSERTS ⌟ ░░░
command -v "$TOOL" >/dev/null || {
  log 1 "❌ missing: $TOOL" >&2
  exit 127
}

#  █░░░░░░░░░░░░░░░░░░░░░░░ ⌜ DEBUG ⌟ ░░░
log 4 " -->> running dedupe v${VER}"
log 6 " --:: EXT    :  *.${EXT}"
log 6 " --:: TOOL   :  ${TOOL}"
log 6 " --:: PLAN   :  ${PLAN}"
log 6 " --:: DRYRUN :  ${DRY}"
log 6 " ----------------------"
sleep 3

#  █░░░░░░░░░░░░░░░░░░░░░░░ ⌜ CORE ⌟ ░░░
function logusage { du -hd1 | sort -h | tee "/tmp/dedup_${1}"; }

function gensum { "$TOOL" "$1" | awk '{print $1}'; }

function rmdup {
  if ((PLAN)); then
    echo "rm $1" >>"$PLAN_PATH"
  else
    rm "$1" --verbose
  fi
}

#  ━╸╺━ ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╸╺━

#  █░░░░░░░░░░░░░░░░░░░░░░░ ⌜ COOK ⌟ ░░░
mkdir -p .meta &>/dev/null || :

rm /tmp/dedup_* &>/dev/null || :

logusage pre

mapfile -t FILES < <(find . -type f -name "*.${EXT}" | tee ".meta/all-$(date +%y%m%d%H)")
declare -i T="${#FILES[@]}"

#  █░░░░░░░░░░░░░░░░░░░░░░░ ⌜ MAIN ⌟ ░░░
last="$(date +%s)"
for F in "${FILES[@]}"; do
  ((++I))
  log 5 "[${I}] ${F::70}"

  [ "${HASH[$F]}" = "" ] && HASH[$F]="$(gensum "$F")"

  if [ "${SUMS[${HASH[$F]}]}" = "" ]; then
    SUMS["${HASH[$F]}"]="$F"
  else
    log 3 "FOUND DUPLICATE ($((++D)))"
    log 3 " => ${F}"
    rmdup "$F"
  fi

  ((I % 20)) || {
    now="$(date +%s)"
    seconds="$((now-last))"
    minutes="$(bc -l <<<"scale=1; ${seconds}/60")"
    log 6 " ${I}/${T} \t $(((I*100)/T))% \t ${seconds}s :: ${minutes}m"
    last="$now"
    commit
  }
done

logusage pos

log 4 "SCANNED ${I}"
log 4 "REMOVED ${D}"

# vim: ft=bash
